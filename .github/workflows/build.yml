# This is a basic workflow that is manually triggered
env:
  REGISTRY_NAME: { registry-name }
  CLUSTER_NAME: { cluster-name }
  CLUSTER_RESOURCE_GROUP: { resource-group-name }
  NAMESPACE: { namespace-name }
  APP_NAME: { app-name }
name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Cache Maven Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{runner.os}}-m2-${{ hashFiles('**/pom.xml')}}
          restore-keys: ${{runner.os}}-m2
      - name: Run Tests
        run: mvn -B test
  sonar:
    needs: tests
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Setup Sonar cloud cache
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Analyze project with SonarCloud
      - name: Analyse with Sonar cloud
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=chabimana_shop-azure-application -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
  buildJar:
    needs: sonar
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      - name: Upload JAR
        uses: actions/upload-artifact@v1
        with:
          name: artifact
          #From
          path: target/shop-azure-application-0.0.1-SNAPSHOT.jar
  buildDockerContainer:
    needs: sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{env.APP_NAME }}:${{ github.sha }}
        working-directory: ./docker
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{secrets.AZURE_CREDENTIALS}}'
          cluster-name: ${{env.CLUSTER_NAME}}
          resource-group: ${{env.CLUSTER_RESOURCE_GROUP}}
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o -json | kubectl apply -f -
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            ${{ github.workspace }}/manifests/deployment.yaml
            ${{ github.workspace }}/manifests/service.yaml
          images: |
            ${{env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          imagepullSecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}

